// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class failedMessageFixed extends ethereum.Event {
  get params(): failedMessageFixed__Params {
    return new failedMessageFixed__Params(this);
  }
}

export class failedMessageFixed__Params {
  _event: failedMessageFixed;

  constructor(event: failedMessageFixed) {
    this._event = event;
  }

  get _msgId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class newPrice extends ethereum.Event {
  get params(): newPrice__Params {
    return new newPrice__Params(this);
  }
}

export class newPrice__Params {
  _event: newPrice;

  constructor(event: newPrice) {
    this._event = event;
  }

  get price(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class tokenSentViaBridge extends ethereum.Event {
  get params(): tokenSentViaBridge__Params {
    return new tokenSentViaBridge__Params(this);
  }
}

export class tokenSentViaBridge__Params {
  _event: tokenSentViaBridge;

  constructor(event: tokenSentViaBridge) {
    this._event = event;
  }

  get _tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _msgId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class NiftyMediator extends ethereum.SmartContract {
  static bind(address: Address): NiftyMediator {
    return new NiftyMediator("NiftyMediator", address);
  }

  bridgeContract(): Address {
    let result = super.call("bridgeContract", "bridgeContract():(address)", []);

    return result[0].toAddress();
  }

  try_bridgeContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bridgeContract",
      "bridgeContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bridgeContractAddress(): Address {
    let result = super.call(
      "bridgeContractAddress",
      "bridgeContractAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_bridgeContractAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bridgeContractAddress",
      "bridgeContractAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  checkSignature(
    signedHash: Bytes,
    signature: Bytes,
    checkAddress: Address
  ): boolean {
    let result = super.call(
      "checkSignature",
      "checkSignature(bytes32,bytes,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(signedHash),
        ethereum.Value.fromBytes(signature),
        ethereum.Value.fromAddress(checkAddress)
      ]
    );

    return result[0].toBoolean();
  }

  try_checkSignature(
    signedHash: Bytes,
    signature: Bytes,
    checkAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkSignature",
      "checkSignature(bytes32,bytes,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(signedHash),
        ethereum.Value.fromBytes(signature),
        ethereum.Value.fromAddress(checkAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkSignatureFlag(): boolean {
    let result = super.call(
      "checkSignatureFlag",
      "checkSignatureFlag():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_checkSignatureFlag(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkSignatureFlag",
      "checkSignatureFlag():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  feeReceiver(): Address {
    let result = super.call("feeReceiver", "feeReceiver():(address)", []);

    return result[0].toAddress();
  }

  try_feeReceiver(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeReceiver", "feeReceiver():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSigner(signedHash: Bytes, signature: Bytes): Address {
    let result = super.call("getSigner", "getSigner(bytes32,bytes):(address)", [
      ethereum.Value.fromFixedBytes(signedHash),
      ethereum.Value.fromBytes(signature)
    ]);

    return result[0].toAddress();
  }

  try_getSigner(
    signedHash: Bytes,
    signature: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSigner",
      "getSigner(bytes32,bytes):(address)",
      [
        ethereum.Value.fromFixedBytes(signedHash),
        ethereum.Value.fromBytes(signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTrustedForwarder(): Address {
    let result = super.call(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTrustedForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mediatorContractOnOtherSide(): Address {
    let result = super.call(
      "mediatorContractOnOtherSide",
      "mediatorContractOnOtherSide():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_mediatorContractOnOtherSide(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "mediatorContractOnOtherSide",
      "mediatorContractOnOtherSide():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  messageFixed(param0: Bytes): boolean {
    let result = super.call("messageFixed", "messageFixed(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_messageFixed(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("messageFixed", "messageFixed(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  niftyRegistry(): Address {
    let result = super.call("niftyRegistry", "niftyRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_niftyRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "niftyRegistry",
      "niftyRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  relayPrice(): BigInt {
    let result = super.call("relayPrice", "relayPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_relayPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("relayPrice", "relayPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  relayTokenFromSignature(_tokenId: BigInt, signature: Bytes): Bytes {
    let result = super.call(
      "relayTokenFromSignature",
      "relayTokenFromSignature(uint256,bytes):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromBytes(signature)
      ]
    );

    return result[0].toBytes();
  }

  try_relayTokenFromSignature(
    _tokenId: BigInt,
    signature: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "relayTokenFromSignature",
      "relayTokenFromSignature(uint256,bytes):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromBytes(signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  requestGasLimit(): BigInt {
    let result = super.call(
      "requestGasLimit",
      "requestGasLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_requestGasLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestGasLimit",
      "requestGasLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  versionRecipient(): string {
    let result = super.call(
      "versionRecipient",
      "versionRecipient():(string)",
      []
    );

    return result[0].toString();
  }

  try_versionRecipient(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "versionRecipient",
      "versionRecipient():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class FixFailedMessageCall extends ethereum.Call {
  get inputs(): FixFailedMessageCall__Inputs {
    return new FixFailedMessageCall__Inputs(this);
  }

  get outputs(): FixFailedMessageCall__Outputs {
    return new FixFailedMessageCall__Outputs(this);
  }
}

export class FixFailedMessageCall__Inputs {
  _call: FixFailedMessageCall;

  constructor(call: FixFailedMessageCall) {
    this._call = call;
  }

  get _msgId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class FixFailedMessageCall__Outputs {
  _call: FixFailedMessageCall;

  constructor(call: FixFailedMessageCall) {
    this._call = call;
  }
}

export class RelayTokenCall extends ethereum.Call {
  get inputs(): RelayTokenCall__Inputs {
    return new RelayTokenCall__Inputs(this);
  }

  get outputs(): RelayTokenCall__Outputs {
    return new RelayTokenCall__Outputs(this);
  }
}

export class RelayTokenCall__Inputs {
  _call: RelayTokenCall;

  constructor(call: RelayTokenCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RelayTokenCall__Outputs {
  _call: RelayTokenCall;

  constructor(call: RelayTokenCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RelayTokenFromSignatureCall extends ethereum.Call {
  get inputs(): RelayTokenFromSignatureCall__Inputs {
    return new RelayTokenFromSignatureCall__Inputs(this);
  }

  get outputs(): RelayTokenFromSignatureCall__Outputs {
    return new RelayTokenFromSignatureCall__Outputs(this);
  }
}

export class RelayTokenFromSignatureCall__Inputs {
  _call: RelayTokenFromSignatureCall;

  constructor(call: RelayTokenFromSignatureCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RelayTokenFromSignatureCall__Outputs {
  _call: RelayTokenFromSignatureCall;

  constructor(call: RelayTokenFromSignatureCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RequestFailedMessageFixCall extends ethereum.Call {
  get inputs(): RequestFailedMessageFixCall__Inputs {
    return new RequestFailedMessageFixCall__Inputs(this);
  }

  get outputs(): RequestFailedMessageFixCall__Outputs {
    return new RequestFailedMessageFixCall__Outputs(this);
  }
}

export class RequestFailedMessageFixCall__Inputs {
  _call: RequestFailedMessageFixCall;

  constructor(call: RequestFailedMessageFixCall) {
    this._call = call;
  }

  get _txHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RequestFailedMessageFixCall__Outputs {
  _call: RequestFailedMessageFixCall;

  constructor(call: RequestFailedMessageFixCall) {
    this._call = call;
  }
}

export class SetBridgeContractCall extends ethereum.Call {
  get inputs(): SetBridgeContractCall__Inputs {
    return new SetBridgeContractCall__Inputs(this);
  }

  get outputs(): SetBridgeContractCall__Outputs {
    return new SetBridgeContractCall__Outputs(this);
  }
}

export class SetBridgeContractCall__Inputs {
  _call: SetBridgeContractCall;

  constructor(call: SetBridgeContractCall) {
    this._call = call;
  }

  get _bridgeContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBridgeContractCall__Outputs {
  _call: SetBridgeContractCall;

  constructor(call: SetBridgeContractCall) {
    this._call = call;
  }
}

export class SetCheckSignatureFlagCall extends ethereum.Call {
  get inputs(): SetCheckSignatureFlagCall__Inputs {
    return new SetCheckSignatureFlagCall__Inputs(this);
  }

  get outputs(): SetCheckSignatureFlagCall__Outputs {
    return new SetCheckSignatureFlagCall__Outputs(this);
  }
}

export class SetCheckSignatureFlagCall__Inputs {
  _call: SetCheckSignatureFlagCall;

  constructor(call: SetCheckSignatureFlagCall) {
    this._call = call;
  }

  get newFlag(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetCheckSignatureFlagCall__Outputs {
  _call: SetCheckSignatureFlagCall;

  constructor(call: SetCheckSignatureFlagCall) {
    this._call = call;
  }
}

export class SetFeeReceiverCall extends ethereum.Call {
  get inputs(): SetFeeReceiverCall__Inputs {
    return new SetFeeReceiverCall__Inputs(this);
  }

  get outputs(): SetFeeReceiverCall__Outputs {
    return new SetFeeReceiverCall__Outputs(this);
  }
}

export class SetFeeReceiverCall__Inputs {
  _call: SetFeeReceiverCall;

  constructor(call: SetFeeReceiverCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeReceiverCall__Outputs {
  _call: SetFeeReceiverCall;

  constructor(call: SetFeeReceiverCall) {
    this._call = call;
  }
}

export class SetMediatorContractOnOtherSideCall extends ethereum.Call {
  get inputs(): SetMediatorContractOnOtherSideCall__Inputs {
    return new SetMediatorContractOnOtherSideCall__Inputs(this);
  }

  get outputs(): SetMediatorContractOnOtherSideCall__Outputs {
    return new SetMediatorContractOnOtherSideCall__Outputs(this);
  }
}

export class SetMediatorContractOnOtherSideCall__Inputs {
  _call: SetMediatorContractOnOtherSideCall;

  constructor(call: SetMediatorContractOnOtherSideCall) {
    this._call = call;
  }

  get _mediatorContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMediatorContractOnOtherSideCall__Outputs {
  _call: SetMediatorContractOnOtherSideCall;

  constructor(call: SetMediatorContractOnOtherSideCall) {
    this._call = call;
  }
}

export class SetNiftyRegistryCall extends ethereum.Call {
  get inputs(): SetNiftyRegistryCall__Inputs {
    return new SetNiftyRegistryCall__Inputs(this);
  }

  get outputs(): SetNiftyRegistryCall__Outputs {
    return new SetNiftyRegistryCall__Outputs(this);
  }
}

export class SetNiftyRegistryCall__Inputs {
  _call: SetNiftyRegistryCall;

  constructor(call: SetNiftyRegistryCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNiftyRegistryCall__Outputs {
  _call: SetNiftyRegistryCall;

  constructor(call: SetNiftyRegistryCall) {
    this._call = call;
  }
}

export class SetRelayPriceCall extends ethereum.Call {
  get inputs(): SetRelayPriceCall__Inputs {
    return new SetRelayPriceCall__Inputs(this);
  }

  get outputs(): SetRelayPriceCall__Outputs {
    return new SetRelayPriceCall__Outputs(this);
  }
}

export class SetRelayPriceCall__Inputs {
  _call: SetRelayPriceCall;

  constructor(call: SetRelayPriceCall) {
    this._call = call;
  }

  get _price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRelayPriceCall__Outputs {
  _call: SetRelayPriceCall;

  constructor(call: SetRelayPriceCall) {
    this._call = call;
  }
}

export class SetRequestGasLimitCall extends ethereum.Call {
  get inputs(): SetRequestGasLimitCall__Inputs {
    return new SetRequestGasLimitCall__Inputs(this);
  }

  get outputs(): SetRequestGasLimitCall__Outputs {
    return new SetRequestGasLimitCall__Outputs(this);
  }
}

export class SetRequestGasLimitCall__Inputs {
  _call: SetRequestGasLimitCall;

  constructor(call: SetRequestGasLimitCall) {
    this._call = call;
  }

  get _requestGasLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRequestGasLimitCall__Outputs {
  _call: SetRequestGasLimitCall;

  constructor(call: SetRequestGasLimitCall) {
    this._call = call;
  }
}

export class SetTrustedForwarderCall extends ethereum.Call {
  get inputs(): SetTrustedForwarderCall__Inputs {
    return new SetTrustedForwarderCall__Inputs(this);
  }

  get outputs(): SetTrustedForwarderCall__Outputs {
    return new SetTrustedForwarderCall__Outputs(this);
  }
}

export class SetTrustedForwarderCall__Inputs {
  _call: SetTrustedForwarderCall;

  constructor(call: SetTrustedForwarderCall) {
    this._call = call;
  }

  get _trustedForwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTrustedForwarderCall__Outputs {
  _call: SetTrustedForwarderCall;

  constructor(call: SetTrustedForwarderCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
